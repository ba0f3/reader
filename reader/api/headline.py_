from flask import jsonify, make_response, request
from flask.views import MethodView
from flask.ext.security import current_user
from reader import app, db
import calendar
from datetime import datetime
from reader.utils import strip_html_tags




ORDER_NEWEST_FIRST = 1
ORDER_OLDEST_FIRST = 2

FILTER_NO_FILTER = 0
FILTER_STARED = 1
FILTER_UNREAD = 2
FILTER_ARCHIVES = 3


class HeadlineAPI(MethodView):
    def get(self):

        if current_user.is_authenticated() is False:
            return make_response(jsonify(error='Unauthorized'), 401)

        category = request.args.get('category', None, type=int)
        feed = request.args.get('feed', None, type=int)
        last_timestamp = request.args.get('lastTimestamp', None, type=int)
        order_mode = request.args.get('orderMode', ORDER_NEWEST_FIRST, type=int)
        filter_mode = request.args.get('filterMode', FILTER_NO_FILTER, type=int)

        print request.args

        user_id = current_user.id

        filters = list()
        orders = list()
        extra_joins = list()
        filters.append("ue.user_id = %s" % user_id)

        if filter_mode == FILTER_UNREAD:
            filters.append("ue.unread = 1")
        elif filter_mode == FILTER_STARED:
            filters.append("ue.stared = 1")

        if category > 0:
            extra_joins.append("INNER JOIN user_feed AS uf ON uf.id = ue.user_feed_id")
            filters.append("uf.category_id = %s" % category)
        elif feed > 0:
            filters.append("e.feed_id = %s" % feed)

        if last_timestamp > 0:
            if order_mode == ORDER_NEWEST_FIRST:
                filters.append("ue.created < '%s'" % datetime.utcfromtimestamp(last_timestamp))
            elif order_mode == ORDER_OLDEST_FIRST:
                filters.append("ue.created > '%s'" % datetime.utcfromtimestamp(last_timestamp))

        if order_mode == ORDER_NEWEST_FIRST:
            orders.append("ue.created DESC")
        elif order_mode == ORDER_OLDEST_FIRST:
            orders.append("ue.created ASC")
        else:
            orders.append("e.title ASC")

        headline_list = list()
        sql = "SELECT ue.id, e.title, f.site_url, e.content, ue.unread, ue.stared, ue.created \
            FROM user_entry AS ue \
            INNER JOIN entry AS e ON e.id = ue.entry_id \
            INNER JOIN feed AS f ON f.id = e.feed_id %s  \
            WHERE %s \
            ORDER BY %s \
            LIMIT 20" % (' '.join(extra_joins), ' AND '.join(filters), ', '.join(orders))

        rows = db.engine.execute(sql)

        for row in rows:
            entry = {
                'id': row.id,
                'title': row.title,
                'site': row.site_url,
                'intro': strip_html_tags(row.content).strip(),  # TODO: tao intro ngay khi update feed
                'created': calendar.timegm(row.created.utctimetuple()),
                'unread': row.unread,
                'stared': row.stared
            }
            headline_list.append(entry)
        return jsonify(objects=headline_list)

_view = HeadlineAPI.as_view('headline_api')

app.add_url_rule('/api/headline/', view_func=_view, methods=['GET'])
