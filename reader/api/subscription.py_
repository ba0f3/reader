from datetime import datetime
from flask import jsonify, make_response, request
from flask.views import MethodView
from flask.ext.security import current_user
from reader import app, db
from reader.models import Entry, Feed, FeedUnreadCache, UserFeed, UserEntry
import feedparser
from reader.commands import update


class SubscriptionAPI(MethodView):
    def post(self):
        """Subscribe to a feed"""
        url = request.json['url'] if 'url' in request.json else None
        category_id = request.json['cid'] if 'cid' in request.json else None
        #username = request.json['username'] if 'username' in request.json else None
        #password = request.json['password'] if 'password' in request.json else None

        url_hash = Feed.get_url_hash(url)
        print url_hash

        feed = Feed.query.filter_by(feed_url_hash=url_hash).first()

        if feed:
            uf = UserFeed.query.filter_by(feed_id=feed.id, user_id=current_user.id).first()
            if uf:
                return jsonify(subscribe=True, error=500, message="You are already subscribe to this feed")
            else:
                uf = UserFeed(current_user.id, category_id, feed.id, feed.name)
                db.session.add(uf)
                db.session.commit()

                entries = Entry.query.filter_by(feed_id=feed.id).all()
                for entry in entries:
                    ue = UserEntry(current_user.id, entry.id, uf.id)
                    db.session.add(ue)
                    db.session.commit()

                fuc = FeedUnreadCache.query.filter_by(user_feed_id=uf.id).first()
                fuc.value = len(entries)
                fuc.last_update = datetime.now()
                db.session.add(fuc)
                db.session.commit()

                #CategoryUnreadCacheRepository.update(category_id)

                return jsonify(id=feed.id)
        else:
            d = feedparser.parse(url, agent="Breakfast https://github.com/VN-Nerds/breakfast")
            if d.bozo == 1:  # error
                print d.status
                if 'status' in d and d.status == 401:  # password protected
                    return jsonify(subscribe=True, error=401, message="Password protected feeds are not supported yet.")
                else:
                    return jsonify(subscribe=True, error=500)

            feed = Feed(url)
            db.session.add(feed)
            db.session.commit()

            update.metadata(feed.id)

            uf = UserFeed(current_user.id, category_id, feed.id, feed.name)
            db.session.add(uf)
            db.session.commit()

            return jsonify(id=feed.id)

    def delete(self, id):
        """Unsubscribe to a feed"""

        ue = UserFeed.query.filter_by(feed_id=id).first()

        if not ue:
            return make_response(jsonify(error='Not Found'), 404)

        if ue.user_id != current_user.id:
            return make_response(jsonify(error='Access Denied'), 403)

        db.session.delete(ue)
        db.session.commit()

        #CategoryUnreadCacheRepository.update(user_feed.category_id)

        return make_response("", 204)


_view = SubscriptionAPI.as_view('subscription_api')

app.add_url_rule('/api/subscription/', view_func=_view, methods=['POST'])
app.add_url_rule('/api/subscription/<int:id>', view_func=_view, methods=['DELETE'])
